{
  "name": "city guard",
  "plural": "city guards",
  "indefiniteArticle": "a",
  "triggers": { "onActive": "(function() {\n    var enemy = this.enemies.findFirstAmong(this.currentRoom.characters);\n    if (enemy) {\n        this.kill(enemy);\n    }\n})", "onAttack": "(function(attacker) {\n    if (this.enemies.indexOf(attacker) === -1) {\n        this.enemies.push(attacker);\n    }\n    this.setTimeout(function() {\n        this.invokeTrigger('onActive');\n    }, 200);\n})", "onCharacterAttacked": "(function(attacker, defendant) {\n    if (attacker.name === \"city guard\" || this.enemies.contains(defendant)) {\n        return;\n    }\n\n    this.enemies.insert(attacker);\n\n    this.setTimeout(function() {\n        this.invokeTrigger(\"onActive\");\n    }, 600);\n})", "onCharacterDied": "(function(defendant, attacker) {\n    var index = this.enemies.indexOf(defendant);\n    if (index > -1) {\n        this.enemies.splice(index, 1);\n    }\n})", "onCharacterEntered": "(function(attacker) {\n    this.setTimeout(function() {\n        this.invokeTrigger('onActive');\n    }, 200);\n})", "onCharacterExit": "(function(activator, exitName) {\n    if (this.enemies.contains(activator)) {\n        activator.send(\"The city guard blocks your exit.\");\n        return false;\n    }\n})", "onshout": "(function(activator, message) {\n    message = message.toLower();\n    if (message.contains(\"help!\") || message.contains(\"guard!\") ||\n        message.contains(\"guards!\")) {\n        var self = this, room = this.currentRoom;\n        room.portals.forEach(function(portal) {\n            if (Util.isDirection(portal.name) &&\n                portal.oppositeOf(room).id === activator.currentRoom.id) {\n                self.setTimeout(function() {\n                    self.go(portal);\n                }, 185);\n            }\n        });\n    }\n})", "onSpawn": "(function() {\n    this.enemies = [];\n    this.currentAction = \"\";\n\n    var previousRoomId = 0;\n    this.setInterval(function() {\n        if (this.currentAction) {\n            return;\n        }\n\n        var portals = this.currentRoom.portals.filter(function(portal) {\n            return portal.name !== \"down\" && portal.name !== \"up\";\n        });\n        if (portals.length > 1) {\n            var currentRoom = this.currentRoom;\n            portals = portals.filter(function(portal) {\n                return portal.oppositeOf(currentRoom).id !== previousRoomId;\n            });\n        }\n        if (portals.length > 0) {\n            previousRoomId = this.currentRoom.id;\n            this.go(portals.randomElement());\n        }\n    }, 27890);\n})", "onTalk": "(function(character, message) {\n    this.setTimeout(function() {\n        message = message.toLower();\n        if (message.endsWith(\".\") || message.endsWith(\"?\") || message.endsWith(\"!\")) {\n            message = message.left(message.length - 1);\n        }\n        \n        var words = message.split(\" \");\n        if (words[0] === \"hi\" || words[0] === \"hello\") {\n            this.talk(character, \"What's up? I'm on the lookout here.\");\n        } else if (words.contains(\"looking\") || words.contains(\"view\") ||\n                   words.contains(\"lookout\") || words.contains(\"look-out\")) {\n            this.talk(character, \"The view from here is pretty good, so I don't mind walking here. \" +\n                                 \"And I got a binocular, so I can appreciate it in earnest.\");\n        } else if (words.contains(\"binocular\")) {\n            var text = \"These binoculars are really good for looking over great distances.\";\n            if (!character.inventory.named(\"binocular\")) {\n                text += \" Here, I actually got a spare!\";\n                \n                this.setTimeout(function() {\n                    var binocular = this.inventory.named(\"binocular\").copy();\n                    character.addInventoryItem(binocular);\n                    \n                    var name = this.definiteName(this.currentRoom.characters,\n                                                 Options.Capitalized);\n                    var description = binocular.indefiniteName();\n                    character.send(\"%1 gives you %2.\".arg(name, description));\n                    \n                    var others = this.currentRoom.characters;\n                    others.removeOne(this);\n                    others.removeOne(character);\n                    others.send(\"%1 gives %2 to %3.\".arg(name, description, character.name));\n                }, 450);\n            }\n            this.talk(character, text);\n        } else {\n            character.send(\"The guard looks at you and shrugs.\");\n        }\n    }, 450);\n})" },
  "position": [ 0, 0, 0 ],
  "weight": 90,
  "cost": 0,
  "flags": "",
  "stats": [30, 30, 30, 30, 20, 20],
  "height": 180,
  "currentRoom": "room:1599",
  "direction": [ 70, -70, 0 ],
  "inventory": [ "item:1629" ],
  "race": "race:2",
  "characterClass": "class:148",
  "gender": "male",
  "respawnTime": 1800000,
  "respawnTimeVariation": 1800000,
  "hp": 60,
  "maxHp": 60,
  "mp": 0,
  "maxMp": 20,
  "gold": 0,
  "weapon": "weapon:1634",
  "secondaryWeapon": "0",
  "shield": "0"
}
